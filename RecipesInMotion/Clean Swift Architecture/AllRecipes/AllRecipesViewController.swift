//
//  AllRecipesViewController.swift
//  RecipesInMotion
//
//  Created by Cathal Farrell on 02/09/2021.
//  Copyright (c) 2021 @thal Productions All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AllRecipesDisplayLogic: AnyObject {
	func displayRecipes(viewModel: AllRecipes.FetchRecipes.ViewModel)
}

class AllRecipesViewController: UIViewController, AllRecipesDisplayLogic {

	@IBOutlet weak var tableView: UITableView!

	var sectionTitle = "All Recipes"
	var sectionImage = "Recipes-Image"
	var recipes: [Recipe] = [Recipe]()
	let sectionHeaderHeight: CGFloat = 100

	var interactor: AllRecipesBusinessLogic?
	var router: (NSObjectProtocol & AllRecipesRoutingLogic & AllRecipesDataPassing)?

	// MARK: Object lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}

	// MARK: Setup

	private func setup() {
		let viewController = self
		let interactor = AllRecipesInteractor()
		let presenter = AllRecipesPresenter()
		let router = AllRecipesRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}

	// MARK: Routing

	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}

	// MARK: View lifecycle

	override func viewDidLoad() {
		super.viewDidLoad()
		setupTable()
		fetchRecipes()
	}

	override var preferredStatusBarStyle: UIStatusBarStyle {
		return .lightContent
	}

	fileprivate func setupTable() {
		// Register the custom header view.
		let cellNib = UINib(nibName: "IngredientTableViewCell", bundle: nil)
		tableView.register(cellNib, forCellReuseIdentifier: IngredientTableViewCell.reuseIdentifier)
		tableView.delegate = self
		tableView.dataSource = self
		tableView.tableFooterView = UIView()
		tableView.backgroundColor = .black
	}
	// MARK: Get the data

	func fetchRecipes() {
		let request = AllRecipes.FetchRecipes.Request()
		interactor?.fetchRecipes(request: request)
	}

	// MARK: Display the results

	func displayRecipes(viewModel: AllRecipes.FetchRecipes.ViewModel) {
		self.recipes = viewModel.recipes
		DispatchQueue.main.async {
			self.tableView.reloadData()
		}
	}
}
extension AllRecipesViewController: UITableViewDelegate {

	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
		return 64
	}

	func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
		return sectionHeaderHeight
	}

	func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {

		// Create a section header view programatically

		let view = UIView(frame: CGRect(x: 0, y: 0, width: tableView.frame.size.width, height: sectionHeaderHeight))
		let label = UILabel(frame: CGRect(x: 10, y: 5, width: tableView.frame.size.width, height: 18))
		label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
		label.textColor = .white
		label.text = self.recipes[section].name

		let imageView = ImageWithGradientBottom(frame: CGRect(x: 0, y: 0,
															  width: tableView.frame.size.width,
															  height: sectionHeaderHeight))
		imageView.image = self.recipes[section].getImage()
		imageView.contentMode = .scaleAspectFill
		imageView.clipsToBounds = true

		view.insertSubview(imageView, at: 0)

		view.addSubview(label)
		view.backgroundColor = UIColor.black

		// Need to programatically add the constraints

		imageView.translatesAutoresizingMaskIntoConstraints = false
		label.translatesAutoresizingMaskIntoConstraints = false

		NSLayoutConstraint.activate([
			// Bind image to all sides
			imageView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
			imageView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
			imageView.topAnchor.constraint(equalTo: view.topAnchor, constant: 8),
			imageView.bottomAnchor.constraint(equalTo: view.bottomAnchor),

			// Position label with a leading margin and bound to all sides
			label.leadingAnchor.constraint(equalTo: view.leadingAnchor,
				   constant: 20),
			label.trailingAnchor.constraint(equalTo: view.trailingAnchor),
			label.topAnchor.constraint(equalTo: view.topAnchor),
			label.bottomAnchor.constraint(equalTo: view.bottomAnchor)
		])

		return view
	}
}
extension AllRecipesViewController: UITableViewDataSource {

	// MARK: - Table view data source

	func numberOfSections(in tableView: UITableView) -> Int {
		return self.recipes.count
	}

	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		self.recipes[section].ingredients.count
	}

	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

		let recipe = self.recipes[indexPath.section]
		let ingredient = recipe.ingredients[indexPath.row]

		guard
			let ingredientTableViewCell = tableView.dequeueReusableCell(withIdentifier: IngredientTableViewCell.reuseIdentifier,
																		for: indexPath) as? IngredientTableViewCell else {
			Log.e("Failed to find ingredientTableViewCell to dequeue")
			return UITableViewCell()
		}
		ingredientTableViewCell.configure(for: ingredient)
		return ingredientTableViewCell
	}

}
