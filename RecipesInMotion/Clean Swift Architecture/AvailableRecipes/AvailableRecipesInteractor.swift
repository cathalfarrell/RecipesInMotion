//
//  AvailableRecipesInteractor.swift
//  RecipesInMotion
//
//  Created by Cathal Farrell on 02/09/2021.
//  Copyright (c) 2021 @thal Productions All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AvailableRecipesBusinessLogic {
	func fetchIngredients(request: Ingredients.FetchIngredients.Request)
	func fetchRecipes(request: AvailableRecipes.FetchRecipes.Request)
	func fetchAvailableRecipes(request: AvailableRecipes.FetchAvailableRecipes.Request)
}

protocol AvailableRecipesDataStore {
	// var name: String { get set }
}

class AvailableRecipesInteractor: AvailableRecipesBusinessLogic, AvailableRecipesDataStore {
	var presenter: AvailableRecipesPresentationLogic?
	var recipesWorker: AvailableRecipesWorker?
	var ingredientsWorker: IngredientsWorker?
	// var name: String = ""

	// MARK: Fetch The Recipes

	func fetchRecipes(request: AvailableRecipes.FetchRecipes.Request) {

		recipesWorker = AvailableRecipesWorker()

		recipesWorker?.getAllRecipes(completionHandler: { [self] recipes, error in
			let response = AvailableRecipes.FetchRecipes.Response(recipes: recipes, error: error)
			self.presenter?.presentRecipes(response: response)
		})
	}

	// MARK: Fetch The Ingredients

	func fetchIngredients(request: Ingredients.FetchIngredients.Request) {
		ingredientsWorker = IngredientsWorker()
		ingredientsWorker?.getAvailableIngredients(completionHandler: { ingredients, error in
			let response = Ingredients.FetchIngredients.Response(ingredients: ingredients, error: error)
			self.presenter?.presentAvailableIngredients(response: response)
		})
	}

	// MARK: Fetch The Recipes for my Ingredients
	func fetchAvailableRecipes(request: AvailableRecipes.FetchAvailableRecipes.Request) {

		recipesWorker = AvailableRecipesWorker()

		recipesWorker?.getAvailableRecipes(recipes: request.allRecipes,
										   ingredients: request.ingredients, completionHandler: { [self] recipes, error in
			let response = AvailableRecipes.FetchAvailableRecipes.Response(recipes: recipes, error: error)
			self.presenter?.presentAvailableRecipes(response: response)
		})
	}
}
