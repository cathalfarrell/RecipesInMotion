//
//  IngredientsViewController.swift
//  RecipesInMotion
//
//  Created by Cathal Farrell on 02/09/2021.
//  Copyright (c) 2021 @thal Productions All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol IngredientsDisplayLogic: AnyObject {
	func displayAvailableIngredients(viewModel: Ingredients.FetchIngredients.ViewModel)
}

class IngredientsViewController: UIViewController, IngredientsDisplayLogic {

	@IBOutlet weak var tableView: UITableView!

	var ingredients: [String] = [String]()

	var interactor: IngredientsBusinessLogic?
	var router: (NSObjectProtocol & IngredientsRoutingLogic & IngredientsDataPassing)?

	// MARK: Object lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}

	// MARK: Setup

	private func setup() {
		let viewController = self
		let interactor = IngredientsInteractor()
		let presenter = IngredientsPresenter()
		let router = IngredientsRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}

	// MARK: Routing

	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}

	// MARK: View lifecycle

	override func viewDidLoad() {
		super.viewDidLoad()
		setupTable()
		fetchAvailableIngredients()
	}

	override var preferredStatusBarStyle: UIStatusBarStyle {
		return .lightContent
	}

	fileprivate func setupTable() {
		// Register the custom header view.
		let cellNib = UINib(nibName: "IngredientTableViewCell", bundle: nil)
		tableView.register(cellNib, forCellReuseIdentifier: IngredientTableViewCell.reuseIdentifier)
		tableView.delegate = self
		tableView.dataSource = self
		tableView.tableFooterView = UIView()
		tableView.backgroundColor = .black
	}

	// MARK: Get the data

	func fetchAvailableIngredients() {
		let request = Ingredients.FetchIngredients.Request()
		interactor?.fetchIngredients(request: request)
	}

	// MARK: Display the results

	func displayAvailableIngredients(viewModel: Ingredients.FetchIngredients.ViewModel) {
		self.ingredients = viewModel.ingredients
		DispatchQueue.main.async {
			self.tableView.reloadData()
		}
	}
}
extension IngredientsViewController: UITableViewDelegate {
	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
		return 64
	}
}
extension IngredientsViewController: UITableViewDataSource {

	// MARK: - Table view data source

	func numberOfSections(in tableView: UITableView) -> Int {
		return 1
	}

	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

		return ingredients.count
	}

	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

		guard
			let ingredientTableViewCell = tableView.dequeueReusableCell(withIdentifier: IngredientTableViewCell.reuseIdentifier,
																		  for: indexPath) as? IngredientTableViewCell else {
			Log.e("Failed to find ingredientTableViewCell to dequeue")
			return UITableViewCell()
		}
		ingredientTableViewCell.configure(for: ingredients[indexPath.row])
		return ingredientTableViewCell
	}
}
